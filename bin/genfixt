#!/usr/bin/env php
<?php

if (is_file(__DIR__.'/../vendor/autoload.php') === true) {
    include_once __DIR__.'/../vendor/autoload.php';
} else {
    error_log('ERROR: Autoload file could not be found');
    exit(1);
}

class GenerateFixtures
{
    /**
     * @var \Suilven\RandomEnglish\RandomEnglishGenerator
     */
    private $reg;


    public function __construct()
    {
        $this->reg = new \Suilven\RandomEnglish\RandomEnglishGenerator();
    }

    public function generateSiteTree()
    {
        $entries = [];
        for ($i=0; $i<25;$i++) {
            $properties = [
                'Title' => $this->reg->Sentence(true),
                'Content' => $this->reg->Paragraph(),
            ];
            $entries['sitetree_' . $i ] = $properties;
        }

        $result = ['SilverStripe\CMS\Model\SiteTree' => $entries];

        error_log(\Symfony\Component\Yaml\Yaml::dump($result, 4, 4));

        $path = getcwd() . '/tests/fixtures/sitetree.yml';
        file_put_contents($path, \Symfony\Component\Yaml\Yaml::dump($result, 4, 4));
        error_log($path);
    }


    private function getRandomAperture()
    {
        $values = [2.8,4,5.6,8,11,16,22,27,32];
        shuffle($values);
        return $values[0];
    }

    private function getRandomShutterSpeed()
    {
        $values = ['1/1000', '1/500', '1/250','1/125','1/60','1/30','1/15', ];
        shuffle($values);
        return $values[0];
    }


    private function getRandomISO()
    {
        $values = [25,64,100,200,400,800,1600 ];
        shuffle($values);
        return $values[0];
    }

    private function getRandomOrientation()
    {
        $values = [0, 90];
        shuffle($values);
        return $values[0];
    }

    public function generateFlickrPhotos()
    {
        /** @var \Suilven\UKPostCodes\API $postcodesAPI */
        $postcodesAPI = new \Suilven\UKPostCodes\API();

        /** @var \Suilven\UKPostCodes\Models\PostCode $postcodeObj */
        $postcodeObj = $postcodesAPI->random();

        $entries = [];
        for ($i=0; $i<50;$i++) {
            $properties = [
                'Title' => $this->reg->Sentence(true),
                'Description' => $this->reg->Paragraph(),
                'Aperture' => $this->getRandomAperture(),
                'ShutterSpeed' => $this->getRandomShutterSpeed(),
                'Orientation' => $this->getRandomOrientation(),
                'ISO' => $this->getRandomISO(),
                'FocalLength35mm'=> 10 * intdiv(rand(24, 600), 10),
                'Latitude' => $postcodeObj->latitude,
                'Longitude' => $postcodeObj->longitude,
                'PostCode' => $postcodeObj->postcode
            ];
            $entries['flickrphoto_' . $i ] = $properties;

            if (rand(0,100) < 70) {
                $nearest = $postcodeObj->nearest();
                shuffle($nearest);
                $postcodeObj = $nearest[0];
            }
        }


        /*
         * 'TakenAt' => 'Datetime',


        'Orientation' => 'Int',
        'PostCode' => 'Varchar(20)',
        'FlickrPlaceID' => 'Varchar(255)',
        'Aperture' => 'Float',
        'ShutterSpeed' => 'Varchar',
        'FocalLength35mm' => 'Int',
        'ISO' => 'Int',

        'AspectRatio' => 'Float',

        // geo
        'Lat' => 'Decimal(18,15)',
        'Lon' => 'Decimal(18,15)',
         */

        $result = ['Suilven\FreeTextSearch\Tests\Models\FlickrPhoto' => $entries];

        error_log(\Symfony\Component\Yaml\Yaml::dump($result, 4, 4));

        $path = getcwd() . '/tests/fixtures/flickrphotos.yml';
        file_put_contents($path, \Symfony\Component\Yaml\Yaml::dump($result, 4, 4));
        error_log($path);
    }

}
// execute it
$cli = new GenerateFixtures();
$cli->generateSiteTree();
$cli->generateFlickrPhotos();

